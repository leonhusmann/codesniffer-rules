name: "CI"

on:
  pull_request:
  push:
    branches:
      - "main"

jobs:

  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3.0.2"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Setup problem matchers for PHP"
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}"

      - name: "Install dependencies"
        run: "composer install --no-interaction --no-progress --ignore-platform-reqs"

      - name: "Update dependencies (lowest)"
        run: "composer update --no-interaction --no-progress --prefer-lowest --prefer-stable"
        if: ${{ matrix.dependencies == 'lowest' }}

      - name: "Update dependencies (latest)"
        run: "composer update --no-interaction --no-progress --no-suggest"
        if: ${{ matrix.dependencies == 'latest' }}

      - name: "Show dependencies"
        run: "composer show"

      - name: "Validate composer.json format"
        run: "composer normalize --ansi --dry-run"

      - name: "Run code style check"
        run: "composer run-script cs"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "lowest"
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3.0.2"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Setup problem matchers for PHP"
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: "Setup problem matchers for PHPUnit"
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}"

      - name: "Install dependencies"
        run: "composer install --no-interaction --no-progress --ignore-platform-reqs"

      - name: "Update dependencies (lowest)"
        run: "composer update --no-interaction --no-progress --prefer-lowest --prefer-stable"
        if: ${{ matrix.dependencies == 'lowest' }}

      - name: "Update dependencies (latest)"
        run: "composer update --no-interaction --no-progress --no-suggest"
        if: ${{ matrix.dependencies == 'latest' }}

      - name: "Show dependencies"
        run: "composer show"

      - name: "Run unit tests"
        run: "composer test"

  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3.0.2"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Setup problem matchers for PHP"
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}"

      - name: "Install dependencies"
        run: "composer install --no-interaction --no-progress --ignore-platform-reqs"

      - name: "Update dependencies (lowest)"
        run: "composer update --no-interaction --no-progress --prefer-lowest --prefer-stable"
        if: ${{ matrix.dependencies == 'lowest' }}

      - name: "Update dependencies (latest)"
        run: "composer update --no-interaction --no-progress --no-suggest"
        if: ${{ matrix.dependencies == 'latest' }}

      - name: "Show dependencies"
        run: "composer show"

      - name: "Run composer-require-checker"
        run: "composer run-script require-checker"

  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3.0.2"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "xdebug"
          php-version: "${{ matrix.php-version }}"
          ini-values: zend.assertions=1
          tools: composer:v2

      - name: "Setup problem matchers for PHP"
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: "Setup problem matchers for PHPUnit"
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}"

      - name: "Install dependencies"
        run: "composer install --no-interaction --no-progress --ignore-platform-reqs"

      - name: "Update dependencies (lowest)"
        run: "composer update --no-interaction --no-progress --prefer-lowest --prefer-stable"
        if: ${{ matrix.dependencies == 'lowest' }}

      - name: "Update dependencies (latest)"
        run: "composer update --no-interaction --no-progress --no-suggest"
        if: ${{ matrix.dependencies == 'latest' }}

      - name: "Show dependencies"
        run: "composer show"

      - name: "Run unit tests with coverage"
        run: "composer test-coverage"

      - name: "Send code coverage report to codecov.io"
        uses: "codecov/codecov-action@v3.1.0"
        with:
          files: "./build/coverage/clover.xml"
          token: "${{ secrets.CODECOV_TOKEN }}"